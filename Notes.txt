

--------------------------------------
web-ui
--------------------------------------



 UI  ==> content/data + style + behavior


 content  ==> HTML
 style    ==> CSS
 behavior ==> javascript
 

 -------------------------------------------

> node -v
> npm -v
> npm i -g live-server

on project directory

> live-server --port=8181

 -------------------------------------------

http://crockford.com/javascript/
http://javascript.info/
https://exploringjs.com/es6/index.html
https://developer.mozilla.org/en-US/docs/Web/JavaScript


-------------------------------------------


what .js-lang can do on HTML-page in browser envi?



using browser provided web-APIs,
JavaScript-lang can bring any dynamic activity/data to web-page


browser-APIs :  ==> are based on 'w3c' recommendations,
implemented nativly by browser vendors & abstracted as JavaScript objects & function


browser-APIs  :
    ==> DOM, XHR,Timer,....

using DOM API
--------------
 -> can create,retreive,update,delete HTML elements
 -> can change element's inner text/html content 
 -> can change element's attributes/properties
 -> can change element's styles ( css )
 -> can validate form-fields before submit to server-program
 -> can create rich UI-components like  autocomplete, calenders,..
 -> can listen any events on element(s)
 ...

using XHR / Fetch API
-----------------------
  -> can communicate with server-side programs async 

using Timer API
-----------------    
  -> can execute any action(s) on timeout/time-interval



HTML5 APIs
------------------
 - https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5



-----------------------------------------------------------------








problems/limitations with plain-js ( your-code ) with browser-apis
------------------------------------------------------------------


 
==> browser compatability issues
     http://www.caniuse.com
==> memory mamanagement issues need to handle manualy
    (i.e clean un-used/invisible DOM elements)
==> performance issues shud take care manually 
    (i.e DOM access should be minimal )   
==> data-binding is manual  
==> too much code for simple operation
==> code oraganization is difficult


----------------------------------------------------------
 legacy soln:

    ==> using server-side page techonolgies

            i.e JSP, ASP, PHP , freemarker, Rails,..,...,....


    
    Problems:

    => on every request, server-side-programs  
       need to re-construct same UI-layout/page with new content,keeping client-state
    => on every request, server programs txring same static resources, 
       this will increase n/w bandwidth   
    => on every new-page response, browser reloads current page with new-page          


----------------------------------------------------------
    
----------------------------------------------------------

 best-soln:

    => using client-side(browser) page technolgies    
    
        how?

           -> js-language improved lot
           -> all browsers also following standards in uniform way..
           -> new APIS from w3c like storage,... api
           +
        ==> using third-party's .js Lib & Frameworks        




        Utility lib
        --------------------------------

        1. jQuery

                ==> DOM + AJAX utility lib 





        MVC / MVVM based lib & frameworks
        ---------------------------------



        1. knockout.js
        2. backbone.js  / marionettejs
        3. ember.js
        4. YUI
        5. Angular.js 1.x    from google-team
        ...


        1. DOJO
        2. Ext.js from sencha  ( commercial )

        ...




        component-arch based lib & F.w
        -----------------------------------------      



        in web-UI ,

        what is component ?
        -------------------

        Independent UI-fragement in web-page
        with single-responsibility

        e.g

        Box, Input,....


        is HTML element(s) follows component based arch ?  "Yes"



        ==> HTML tag/element/component

                i.e dom-element is individual component


        ==> every html-tag/element/component
            is an instance of HTMLXXXElement class


        e.g

        <div></div>  instanceof 'HTMLDivElement' class

        i.e

        HTMLDivElement      ==> HTML-component-class
        <div></div>         ==> HTML-component-instance

        HTMLInputElement    ==> HTML-component-class
        <input/>            ==> HTML-component-instance





        component's characteristics
        ----------------------------

        ==> always have single-responsibility     ( smaller & simpler )
        ==> every component loosly-coupled from other



         adv of component arch in web-ui
         -------------------------------        
            ==> easy to nest multiple component(s) together
                without any complexity/pollution



        
        -------------------------------------
        html-component properties/attributes
        -------------------------------------

        div component
                - id
                - class
                - innerHTML

        input component

                - id 
                - class
                - type 




        imp-note :
        
        => parent-component can create any child-component 
           with properties 

        i.e

        immutable-value(s) given by parent-component to child-component 
        while instantiating/re-rendering   



        -------------------------------------
        types of html-components
        -------------------------------------


        1. stateless components   e.g   <div>, <hr/>
        2. statefull components   e.g   <input /> , <canvas> , <audio /> ...


        state ==> component's own data


         imp-note :
        
        ==> when component's state changes, always will re-render





                    
        -------------------------------------------------

        in component based arch  
                ==> uni-directional data-flow
        i.e
        parent --> child : data/props will go down
        child  --> parent : action/event will come up



        --------------------------------------------------


        --------------------------------------------------

        by default HTML/borwser-DOM, 
        follows component architecture

        --------------------------------------------------



        somtimes we need components like these   

        - Product
        - Review
        - Login
        - Cart
        - XXX
        - DatePicker
        - DataTable
        - Search
        .....



        how to create custom web-components?

        2 ways

         ---------------------------------------------------
        way-1: using w3c's web component spec based APIs
        ---------------------------------------------------


         - HTML Template
         - Shadow DOM ( private scoped envi )
         - Custom Elements


        ---------------------------------------------------
        way-2: using third party's js lib & F.Ws
        ---------------------------------------------------


        1. react.js    from facebook       : v16   ( our focus  )
        2. Angular     from google-team    : v7
        3. Vue.js
        4. Ember.js
        5. Aurelia.js
        6. polymer.js
        ...


        -----------------------------------------------------

        Ex1 - clock

        -----------------------------------------------------





        to develope front-end appln, we need many tools

        ==> package manager     --> npm / yarn
        ==> transpiler/compiler --> babel
        ==> module bundler      --> webpack
        ==> linting             --> ES-lint
        ==> unit-testing        --> jasmine/mocha/jest

        ....

        

        from facebook, we got command-line tool

                - create-react-app cli tool
        
        --------------------------------------------

        > node -v
        > npm -v

        > npm i -g yarn

        > npm i -g create-react-app

        on workspace directory

        > create-react-app <app-name>

        > cd app-name

        > npm start | yarn start

        --------------------------------------------


          --------------------------------------------

        React topics
        ------------------
        
        component's

        - props & state
        - life-cycle
        - data-flow b/w components
        - context
        - container components
        - HOC ( Higher Order Component) pattern

        ---------------------------------------------






                

        Arch.. design issues  with 'react' only
        ------------------------------------------

        

        ===> state/model/ui-data is scattered across UI components
        ===> state & state-change logic & network/service calls 
        are tightly-coupled with UI components
        ===> if same state is required in multiple components 
        either we should duplicate that state in components or we should pass via input properties 
        ===> Unit-Testing is very difficult in components
        ===> we cant re-use same components across diffent pages or applications


        soln:

        ==> isolate common state & state change logic & n/wing logic 
        from UI components


        How ?

        way-1 : using MVC Arch pattern

                --> bi-directional data-flow b/w view & state/model

        way-2 : Flux pattern  ( from facebook )

                 --> uni-directional data-flow b/w view & state/model


-----------------------------------------------------------



steps to do state management with redux lib



UI  ==>  Eat-IT


//---------------------------------------------
step-1 : indentify state/model & r/s b/w them, that represents UI
//---------------------------------------------

 - items
 - reviews
 - cart
 - order
 - account
 ......


//---------------------------------------------
step-2 : indentify action(s) which cause state change
//---------------------------------------------

 - LOAD_ITEMS
 - LOAD_REVIEWS
 - ADD_NEW_REVIEW
 - BUY
 - CHECKOUT
 - LOGIN
......

//---------------------------------------------
step-3 : create action(s) by action creator(s) / operations
//---------------------------------------------


e.g function loadItems(food,10){
    //...............
    return {type:LOAD_ITEMS,[]}  // Ation
}



//---------------------------------------------
step-4 : process action(s) by reducer(s)
//---------------------------------------------

e.g  function itemsReducer(state,action){
    //....
    return new-state

}


//---------------------------------------------
step-5 : combine/compose all reducer(s) as root-reducer
//---------------------------------------------



//---------------------------------------------
step-6 : create store with root-reducer
//---------------------------------------------


       



